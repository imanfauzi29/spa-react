{"version":3,"sources":["components/layouts/Footer.jsx","../../../src/utils/render.ts","../../../src/components/keyboard.ts","../../../src/utils/match.ts","../../../src/hooks/use-sync-refs.ts","../../../src/utils/bugs.ts","../../../src/hooks/use-iso-morphic-effect.ts","../../../src/hooks/use-server-handoff-complete.ts","../../../src/hooks/use-id.ts","../../../src/internal/open-closed.tsx","../../../../src/components/disclosure/disclosure.tsx","../../../src/hooks/use-resolve-button-type.ts","components/layouts/Header.jsx","components/PageLayout.jsx"],"names":["Footer","Features","RenderStrategy","Keys","className","Date","getYear","match","value","lookup","returnValue","args","error","Error","Object","key","render","props","slot","defaultTag","features","visible","name","_render","featureFlags","isStatic","rest","unmount","hidden","style","display","omit","as","Component","tag","children","refName","passThroughProps","refRelatedProps","resolvedChildren","isValidElement","Array","line","cloneElement","clone","func","existingProps","event","mergeEventFunctions","compact","createElement","forwardRefWithAs","component","forwardRef","displayName","keysToOmit","useSyncRefs","refs","cache","useRef","useEffect","useCallback","ref","isDisabledReactIssue7711","element","parent","legend","isParentDisabled","previous","isFirstLegend","useIsoMorphicEffect","window","state","serverHandoffComplete","id","generateId","useId","ready","useState","setServerHandoffComplete","useServerHandoffComplete","setId","State","Context","createContext","OpenClosedProvider","resolveType","DisclosureStates","ActionTypes","reducers","disclosureState","Closed","linkedPanel","action","buttonId","panelId","DisclosureContext","useDisclosureContext","context","useContext","err","Disclosure","DisclosureAPIContext","useDisclosureAPIContext","DisclosurePanelContext","stateReducer","DEFAULT_DISCLOSURE_TAG","defaultOpen","passthroughProps","reducerBag","useReducer","dispatch","type","close","CloseDisclosure","restoreElement","focusableElement","document","api","useMemo","open","Button","internalButtonRef","buttonRef","panelContext","isWithinPanel","handleKeyDown","ToggleDisclosure","handleKeyUp","handleClick","Open","setType","useResolveButtonType","onKeyDown","onClick","onKeyUp","PanelRenderFeatures","Panel","panelRef","LinkPanel","usesOpenClosedState","UnlinkPanel","propsWeControl","Header","navigation","href","map","item","exact","to","activeClassName","PageLayout","height"],"mappings":"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","file":"static/js/3.190aa598.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Footer() {\n    return (\n        <footer className=\"footer relative bg-gray-800\">\n            <div className=\"container mx-auto text-white text-center py-5\">\n                &copy;Copyright {new Date().getYear()} | Gadjian\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer\n","import {\n  Fragment,\n  cloneElement,\n  createElement,\n  forwardRef,\n  isValidElement,\n\n  // Types\n  ElementType,\n  ReactElement,\n} from 'react'\nimport { Props, XOR, __, Expand } from '../types'\nimport { match } from './match'\n\nexport enum Features {\n  /** No features at all */\n  None = 0,\n\n  /**\n   * When used, this will allow us to use one of the render strategies.\n   *\n   * **The render strategies are:**\n   *    - **Unmount**   _(Will unmount the component.)_\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\n   */\n  RenderStrategy = 1,\n\n  /**\n   * When used, this will allow the user of our component to be in control. This can be used when\n   * you want to transition based on some state.\n   */\n  Static = 2,\n}\n\nexport enum RenderStrategy {\n  Unmount,\n  Hidden,\n}\n\ntype PropsForFeature<TPassedInFeatures extends Features, TForFeature extends Features, TProps> = {\n  [P in TPassedInFeatures]: P extends TForFeature ? TProps : __\n}[TPassedInFeatures]\n\nexport type PropsForFeatures<T extends Features> = XOR<\n  PropsForFeature<T, Features.Static, { static?: boolean }>,\n  PropsForFeature<T, Features.RenderStrategy, { unmount?: boolean }>\n>\n\nexport function render<TFeature extends Features, TTag extends ElementType, TSlot>({\n  props,\n  slot,\n  defaultTag,\n  features,\n  visible = true,\n  name,\n}: {\n  props: Expand<Props<TTag, TSlot, any> & PropsForFeatures<TFeature>>\n  slot?: TSlot\n  defaultTag: ElementType\n  features?: TFeature\n  visible?: boolean\n  name: string\n}) {\n  // Visible always render\n  if (visible) return _render(props, slot, defaultTag, name)\n\n  let featureFlags = features ?? Features.None\n\n  if (featureFlags & Features.Static) {\n    let { static: isStatic = false, ...rest } = props as PropsForFeatures<Features.Static>\n\n    // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n    if (isStatic) return _render(rest, slot, defaultTag, name)\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    let { unmount = true, ...rest } = props as PropsForFeatures<Features.RenderStrategy>\n    let strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n    return match(strategy, {\n      [RenderStrategy.Unmount]() {\n        return null\n      },\n      [RenderStrategy.Hidden]() {\n        return _render(\n          { ...rest, ...{ hidden: true, style: { display: 'none' } } },\n          slot,\n          defaultTag,\n          name\n        )\n      },\n    })\n  }\n\n  // No features enabled, just render\n  return _render(props, slot, defaultTag, name)\n}\n\nfunction _render<TTag extends ElementType, TSlot>(\n  props: Props<TTag, TSlot> & { ref?: unknown },\n  slot: TSlot = {} as TSlot,\n  tag: ElementType,\n  name: string\n) {\n  let { as: Component = tag, children, refName = 'ref', ...passThroughProps } = omit(props, [\n    'unmount',\n    'static',\n  ])\n\n  // This allows us to use `<HeadlessUIComponent as={MyComponent} refName=\"innerRef\" />`\n  let refRelatedProps = props.ref !== undefined ? { [refName]: props.ref } : {}\n\n  let resolvedChildren = (typeof children === 'function' ? children(slot) : children) as\n    | ReactElement\n    | ReactElement[]\n\n  // Allow for className to be a function with the slot as the contents\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    ;(passThroughProps as any).className = passThroughProps.className(slot)\n  }\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (\n        !isValidElement(resolvedChildren) ||\n        (Array.isArray(resolvedChildren) && resolvedChildren.length > 1)\n      ) {\n        throw new Error(\n          [\n            'Passing props on \"Fragment\"!',\n            '',\n            `The current component <${name} /> is rendering a \"Fragment\".`,\n            `However we need to passthrough the following props:`,\n            Object.keys(passThroughProps)\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n            '',\n            'You can apply a few solutions:',\n            [\n              'Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\n              'Render a single element as the child so that we can forward the props onto that element.',\n            ]\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n          ].join('\\n')\n        )\n      }\n\n      return cloneElement(\n        resolvedChildren,\n        Object.assign(\n          {},\n          // Filter out undefined values so that they don't override the existing values\n          mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, [\n            'onClick',\n          ]),\n          refRelatedProps\n        )\n      )\n    }\n  }\n\n  return createElement(\n    Component,\n    Object.assign({}, omit(passThroughProps, ['ref']), Component !== Fragment && refRelatedProps),\n    resolvedChildren\n  )\n}\n\n/**\n * We can use this function for the following useCase:\n *\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\n *\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\n * first child, that one should _also_ be called (but before this implementation, it was just\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\n * props of this component.\n *\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\n * so that we can refactor this later (if needed).\n */\nfunction mergeEventFunctions(\n  passThroughProps: Record<string, any>,\n  existingProps: Record<string, any>,\n  functionsToMerge: string[]\n) {\n  let clone = Object.assign({}, passThroughProps)\n  for (let func of functionsToMerge) {\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      Object.assign(clone, {\n        [func](event: { defaultPrevented: boolean }) {\n          // Props we control\n          if (!event.defaultPrevented) passThroughProps[func](event)\n\n          // Existing props on the component\n          if (!event.defaultPrevented) existingProps[func](event)\n        },\n      })\n    }\n  }\n\n  return clone\n}\n\n/**\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\n * wrap it in a forwardRef so that we _can_ passthrough the ref\n */\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(forwardRef((component as unknown) as any) as any, {\n    displayName: component.displayName ?? component.name,\n  })\n}\n\nfunction compact<T extends Record<any, any>>(object: T) {\n  let clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n\nfunction omit<T extends Record<any, any>>(object: T, keysToOmit: string[] = []) {\n  let clone = Object.assign({}, object)\n  for (let key of keysToOmit) {\n    if (key in clone) delete clone[key]\n  }\n  return clone\n}\n","// TODO: This must already exist somewhere, right? 🤔\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport enum Keys {\n  Space = ' ',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Backspace = 'Backspace',\n\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n\n  Home = 'Home',\n  End = 'End',\n\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n\n  Tab = 'Tab',\n}\n","export function match<TValue extends string | number = string, TReturnValue = unknown>(\n  value: TValue,\n  lookup: Record<TValue, TReturnValue | ((...args: any[]) => TReturnValue)>,\n  ...args: any[]\n): TReturnValue {\n  if (value in lookup) {\n    let returnValue = lookup[value]\n    return typeof returnValue === 'function' ? returnValue(...args) : returnValue\n  }\n\n  let error = new Error(\n    `Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(\n      lookup\n    )\n      .map(key => `\"${key}\"`)\n      .join(', ')}.`\n  )\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match)\n  throw error\n}\n","import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType | null> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n","// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nexport function isDisabledReactIssue7711(element: Element): boolean {\n  let parent = element.parentElement\n  let legend = null\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent\n    parent = parent.parentElement\n  }\n\n  let isParentDisabled = parent?.getAttribute('disabled') === '' ?? false\n  if (isParentDisabled && isFirstLegend(legend)) return false\n\n  return isParentDisabled\n}\n\nfunction isFirstLegend(element: HTMLLegendElement | null): boolean {\n  if (!element) return false\n\n  let previous = element.previousElementSibling\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false\n    previous = previous.previousElementSibling\n  }\n\n  return true\n}\n","import { useLayoutEffect, useEffect } from 'react'\n\nexport const useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import { useState, useEffect } from 'react'\n\nlet state = { serverHandoffComplete: false }\n\nexport function useServerHandoffComplete() {\n  let [serverHandoffComplete, setServerHandoffComplete] = useState(state.serverHandoffComplete)\n\n  useEffect(() => {\n    if (serverHandoffComplete === true) return\n\n    setServerHandoffComplete(true)\n  }, [serverHandoffComplete])\n\n  useEffect(() => {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true\n  }, [])\n\n  return serverHandoffComplete\n}\n","import { useState } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { useServerHandoffComplete } from './use-server-handoff-complete'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let ready = useServerHandoffComplete()\n  let [id, setId] = useState(ready ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  return id != null ? '' + id : undefined\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n  ReactElement,\n} from 'react'\n\nlet Context = createContext<State | null>(null)\nContext.displayName = 'OpenClosedContext'\n\nexport enum State {\n  Open,\n  Closed,\n}\n\nexport function useOpenClosed() {\n  return useContext(Context)\n}\n\ninterface Props {\n  value: State\n  children: ReactNode\n}\n\nexport function OpenClosedProvider({ value, children }: Props): ReactElement {\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n  CloseDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.CloseDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.CloseDisclosure]: state => {\n    if (state.disclosureState === DisclosureStates.Closed) return state\n    return { ...state, disclosureState: DisclosureStates.Closed }\n  },\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosureAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nDisclosureAPIContext.displayName = 'DisclosureAPIContext'\n\nfunction useDisclosureAPIContext(component: string) {\n  let context = useContext(DisclosureAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosurePanelContext = createContext<string | null>(null)\nDisclosurePanelContext.displayName = 'DisclosurePanelContext'\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext)\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.CloseDisclosure })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return document.getElementById(buttonId)\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return document.getElementById(buttonId)\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, buttonId]\n  )\n\n  let api = useMemo<ContextType<typeof DisclosureAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open, close }),\n    [disclosureState, close]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <DisclosureAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(disclosureState, {\n            [DisclosureStates.Open]: State.Open,\n            [DisclosureStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props: passthroughProps,\n            slot,\n            defaultTag: DEFAULT_DISCLOSURE_TAG,\n            name: 'Disclosure',\n          })}\n        </OpenClosedProvider>\n      </DisclosureAPIContext.Provider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n  let buttonRef = useSyncRefs(internalButtonRef, ref)\n\n  let panelContext = useDisclosurePanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.disclosureState === DisclosureStates.Closed) return\n\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            document.getElementById(state.buttonId)?.focus()\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            break\n        }\n      }\n    },\n    [dispatch, isWithinPanel, state.disclosureState]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n        document.getElementById(state.buttonId)?.focus()\n      } else {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n      }\n    },\n    [dispatch, props.disabled, state.buttonId, isWithinPanel]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? { ref: buttonRef, type, onKeyDown: handleKeyDown, onClick: handleClick }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled\n          ? undefined\n          : state.disclosureState === DisclosureStates.Open,\n        'aria-controls': state.linkedPanel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let { close } = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.'))\n\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return (\n    <DisclosurePanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Disclosure.Panel',\n      })}\n    </DisclosurePanelContext.Provider>\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n","import { useState, MutableRefObject } from 'react'\n\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nfunction resolveType<TTag>(props: { type?: string; as?: TTag }) {\n  if (props.type) return props.type\n\n  let tag = props.as ?? 'button'\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button'\n\n  return undefined\n}\n\nexport function useResolveButtonType<TTag>(\n  props: { type?: string; as?: TTag },\n  ref: MutableRefObject<HTMLElement | null>\n) {\n  let [type, setType] = useState(() => resolveType(props))\n\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props))\n  }, [props.type, props.as])\n\n  useIsoMorphicEffect(() => {\n    if (type) return\n    if (!ref.current) return\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button')\n    }\n  }, [type, ref])\n\n  return type\n}\n","import React from \"react\"\nimport { Disclosure } from \"@headlessui/react\"\nimport { MenuIcon, XIcon } from \"@heroicons/react/solid\"\nimport { NavLink } from \"react-router-dom\"\n\nfunction Header() {\n    const navigation = [\n        { name: \"Home\", href: \"/\"},\n        { name: \"Personel List\", href: \"personnel-list\"},\n        { name: \"Daily Attendance\", href: \"daily-attendance\"}\n    ]\n\n    return (\n        <Disclosure as=\"nav\" className=\"bg-gray-800\">\n            {({ open }) => (\n                <>\n                    <div className=\"max-w-7xl mx-auto px-2 sm:px-6 lg:px-8\">\n                        <div className=\"relative flex items-center justify-between h-16\">\n                            <div className=\"absolute inset-y-0 left-0 flex items-center sm:hidden\">\n                                {/* Mobile menu button*/}\n                                <Disclosure.Button className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\">\n                                    <span className=\"sr-only\">\n                                        Open main menu\n                                    </span>\n                                    {open ? (\n                                        <XIcon\n                                            className=\"block h-6 w-6\"\n                                            aria-hidden=\"true\"\n                                        />\n                                    ) : (\n                                        <MenuIcon\n                                            className=\"block h-6 w-6\"\n                                            aria-hidden=\"true\"\n                                        />\n                                    )}\n                                </Disclosure.Button>\n                            </div>\n                            <div className=\"flex-1 flex items-center justify-center sm:items-stretch sm:justify-start\">\n                                <div className=\"flex-shrink-0 flex items-center\">\n                                    <h1 className=\"text-3xl text-white font-bold\">Gadjian</h1>\n                                </div>\n                                <div className=\"hidden sm:block sm:ml-6\">\n                                    <div className=\"flex space-x-4\">\n                                        {navigation.map((item) => (\n                                            <NavLink\n                                                exact\n                                                key={item.name}\n                                                to={item.href}\n                                                activeClassName={\"active\"}\n                                                className={\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"}>\n                                                {item.name}\n                                            </NavLink>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <Disclosure.Panel className=\"sm:hidden\">\n                        <div className=\"px-2 pt-2 pb-3 space-y-1\">\n                            {navigation.map((item) => (\n                                <NavLink\n                                    exact\n                                    key={item.name}\n                                    to={item.href}\n                                    activeClassName={\"active\"}\n                                    className={\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"}>\n                                    {item.name}\n                                </NavLink>\n                            ))}\n                        </div>\n                    </Disclosure.Panel>\n                </>\n            )}\n        </Disclosure>\n    )\n}\n\nexport default Header\n","import React from \"react\"\nimport { Header, Footer } from \"./layouts\"\n\nfunction PageLayout({ children }) {\n    return (\n        <div className=\"flex flex-col\" style={{height: \"100vh\"}}>\n            <Header />\n            <div className=\"container mx-auto mt-5 px-4 flex-1\">{children}</div>\n            <Footer />\n        </div>\n    )\n}\n\nexport default PageLayout"],"sourceRoot":""}