{"version":3,"sources":["../../../src/utils/match.ts","../../../src/hooks/use-iso-morphic-effect.ts","../../../src/hooks/use-id.ts","../../../src/internal/open-closed.tsx","../../../src/utils/render.ts","../../../src/utils/disposables.ts","../../../src/hooks/use-server-handoff-complete.ts","../../../src/hooks/use-sync-refs.ts","../../../src/components/keyboard.ts","../../../src/utils/bugs.ts","../../../src/hooks/use-resolve-button-type.ts","../../../../src/components/disclosure/disclosure.tsx","../../../src/utils/focus-management.ts","../../../src/utils/calculate-active-index.ts","../../../../src/components/menu/menu.tsx","../../../src/hooks/use-disposables.ts","../../../src/hooks/use-window-event.ts","../../../src/hooks/use-tree-walker.ts","../../../src/hooks/use-is-initial-render.ts","../../../../../src/components/transitions/utils/transition.ts","../../../src/utils/once.ts","../../../../src/components/transitions/transition.tsx","../../../src/hooks/use-is-mounted.ts"],"names":["match","value","lookup","returnValue","args","error","Error","Object","key","useIsoMorphicEffect","window","useEffect","id","generateId","useId","ready","useServerHandoffComplete","useState","setId","State","Context","createContext","useOpenClosed","useContext","OpenClosedProvider","children","Features","RenderStrategy","render","props","slot","defaultTag","features","visible","name","_render","featureFlags","isStatic","rest","unmount","strategy","hidden","style","display","omit","as","Component","tag","refName","passThroughProps","refRelatedProps","resolvedChildren","isValidElement","Array","line","cloneElement","clone","func","existingProps","event","mergeEventFunctions","compact","createElement","forwardRefWithAs","component","forwardRef","displayName","keysToOmit","disposables","api","requestAnimationFrame","raf","cancelAnimationFrame","nextFrame","setTimeout","timer","clearTimeout","add","dispose","state","serverHandoffComplete","setServerHandoffComplete","useSyncRefs","refs","cache","useRef","useCallback","ref","Keys","isDisabledReactIssue7711","element","parent","legend","isParentDisabled","previous","isFirstLegend","resolveType","useResolveButtonType","type","setType","DisclosureStates","ActionTypes","reducers","disclosureState","Closed","linkedPanel","action","buttonId","panelId","DisclosureContext","useDisclosureContext","context","err","Disclosure","DisclosureAPIContext","useDisclosureAPIContext","DisclosurePanelContext","stateReducer","DEFAULT_DISCLOSURE_TAG","defaultOpen","passthroughProps","reducerBag","useReducer","dispatch","close","CloseDisclosure","restoreElement","focusableElement","document","useMemo","open","Button","internalButtonRef","buttonRef","panelContext","isWithinPanel","handleKeyDown","ToggleDisclosure","handleKeyUp","handleClick","Open","propsWeControl","onKeyDown","onClick","onKeyUp","PanelRenderFeatures","Panel","panelRef","LinkPanel","usesOpenClosedState","UnlinkPanel","Focus","FocusResult","FocusableMode","focusableSelector","selector","Direction","useDisposables","d","calculateActiveIndex","resolvers","items","currentActiveIndex","activeIndex","nextActiveIndex","item","idx","all","x","assertNever","MenuStates","activeItemIndex","menuState","resolveItems","resolveActiveIndex","resolveId","resolveDisabled","searchQuery","dataRef","nextItems","currentActiveItem","a","MenuContext","useMenuContext","Menu","DEFAULT_MENU_TAG","createRef","itemsRef","listener","options","listenerRef","useWindowEvent","target","CloseMenu","mode","Strict","next","isFocusableElement","OpenMenu","focus","First","Last","preventScroll","ItemsRenderFeatures","Items","searchDisposables","container","useTreeWalker","accept","walk","enabled","acceptRef","walkRef","acceptNode","walker","NodeFilter","node","Next","Previous","ClearSearch","role","tabIndex","DEFAULT_ITEM_TAG","Item","disabled","active","block","bag","handleFocus","Nothing","handleMove","handleLeave","onFocus","onPointerMove","onMouseMove","onPointerLeave","onMouseLeave","useIsInitialRender","initial","Reason","addClasses","classes","removeClasses","transition","base","from","to","entered","done","_done","cb","called","once","getComputedStyle","transitionDuration","transitionDelay","map","v","parseFloat","z","resolvedValue","durationMs","delaysMs","waitForTransition","reason","useSplitClasses","className","TransitionContext","TreeStates","NestingContext","hasChildren","useNesting","doneRef","transitionableChildren","mounted","useIsMounted","unregister","Hidden","register","child","Visible","childId","noop","eventNames","ensureEventHooksExist","events","result","TransitionChildRenderFeatures","TransitionChild","beforeEnter","afterEnter","beforeLeave","afterLeave","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","setState","useTransitionContext","show","appear","useParentNesting","isTransitioning","nesting","enterClasses","enterFromClasses","enterToClasses","enteredClasses","leaveClasses","leaveFromClasses","leaveToClasses","eventsRef","useEvents","skip","Transition","includes","nestingBag","transitionBag","sharedProps","React","hasTransitionContext","hasOpenClosedContext"],"mappings":"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","file":"static/js/3.be7d3898.chunk.js","sourcesContent":["export function match<TValue extends string | number = string, TReturnValue = unknown>(\n  value: TValue,\n  lookup: Record<TValue, TReturnValue | ((...args: any[]) => TReturnValue)>,\n  ...args: any[]\n): TReturnValue {\n  if (value in lookup) {\n    let returnValue = lookup[value]\n    return typeof returnValue === 'function' ? returnValue(...args) : returnValue\n  }\n\n  let error = new Error(\n    `Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(\n      lookup\n    )\n      .map(key => `\"${key}\"`)\n      .join(', ')}.`\n  )\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match)\n  throw error\n}\n","import { useLayoutEffect, useEffect } from 'react'\n\nexport const useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import { useState } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { useServerHandoffComplete } from './use-server-handoff-complete'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let ready = useServerHandoffComplete()\n  let [id, setId] = useState(ready ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  return id != null ? '' + id : undefined\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n  ReactElement,\n} from 'react'\n\nlet Context = createContext<State | null>(null)\nContext.displayName = 'OpenClosedContext'\n\nexport enum State {\n  Open,\n  Closed,\n}\n\nexport function useOpenClosed() {\n  return useContext(Context)\n}\n\ninterface Props {\n  value: State\n  children: ReactNode\n}\n\nexport function OpenClosedProvider({ value, children }: Props): ReactElement {\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n","import {\n  Fragment,\n  cloneElement,\n  createElement,\n  forwardRef,\n  isValidElement,\n\n  // Types\n  ElementType,\n  ReactElement,\n} from 'react'\nimport { Props, XOR, __, Expand } from '../types'\nimport { match } from './match'\n\nexport enum Features {\n  /** No features at all */\n  None = 0,\n\n  /**\n   * When used, this will allow us to use one of the render strategies.\n   *\n   * **The render strategies are:**\n   *    - **Unmount**   _(Will unmount the component.)_\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\n   */\n  RenderStrategy = 1,\n\n  /**\n   * When used, this will allow the user of our component to be in control. This can be used when\n   * you want to transition based on some state.\n   */\n  Static = 2,\n}\n\nexport enum RenderStrategy {\n  Unmount,\n  Hidden,\n}\n\ntype PropsForFeature<TPassedInFeatures extends Features, TForFeature extends Features, TProps> = {\n  [P in TPassedInFeatures]: P extends TForFeature ? TProps : __\n}[TPassedInFeatures]\n\nexport type PropsForFeatures<T extends Features> = XOR<\n  PropsForFeature<T, Features.Static, { static?: boolean }>,\n  PropsForFeature<T, Features.RenderStrategy, { unmount?: boolean }>\n>\n\nexport function render<TFeature extends Features, TTag extends ElementType, TSlot>({\n  props,\n  slot,\n  defaultTag,\n  features,\n  visible = true,\n  name,\n}: {\n  props: Expand<Props<TTag, TSlot, any> & PropsForFeatures<TFeature>>\n  slot?: TSlot\n  defaultTag: ElementType\n  features?: TFeature\n  visible?: boolean\n  name: string\n}) {\n  // Visible always render\n  if (visible) return _render(props, slot, defaultTag, name)\n\n  let featureFlags = features ?? Features.None\n\n  if (featureFlags & Features.Static) {\n    let { static: isStatic = false, ...rest } = props as PropsForFeatures<Features.Static>\n\n    // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n    if (isStatic) return _render(rest, slot, defaultTag, name)\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    let { unmount = true, ...rest } = props as PropsForFeatures<Features.RenderStrategy>\n    let strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n    return match(strategy, {\n      [RenderStrategy.Unmount]() {\n        return null\n      },\n      [RenderStrategy.Hidden]() {\n        return _render(\n          { ...rest, ...{ hidden: true, style: { display: 'none' } } },\n          slot,\n          defaultTag,\n          name\n        )\n      },\n    })\n  }\n\n  // No features enabled, just render\n  return _render(props, slot, defaultTag, name)\n}\n\nfunction _render<TTag extends ElementType, TSlot>(\n  props: Props<TTag, TSlot> & { ref?: unknown },\n  slot: TSlot = {} as TSlot,\n  tag: ElementType,\n  name: string\n) {\n  let { as: Component = tag, children, refName = 'ref', ...passThroughProps } = omit(props, [\n    'unmount',\n    'static',\n  ])\n\n  // This allows us to use `<HeadlessUIComponent as={MyComponent} refName=\"innerRef\" />`\n  let refRelatedProps = props.ref !== undefined ? { [refName]: props.ref } : {}\n\n  let resolvedChildren = (typeof children === 'function' ? children(slot) : children) as\n    | ReactElement\n    | ReactElement[]\n\n  // Allow for className to be a function with the slot as the contents\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    ;(passThroughProps as any).className = passThroughProps.className(slot)\n  }\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (\n        !isValidElement(resolvedChildren) ||\n        (Array.isArray(resolvedChildren) && resolvedChildren.length > 1)\n      ) {\n        throw new Error(\n          [\n            'Passing props on \"Fragment\"!',\n            '',\n            `The current component <${name} /> is rendering a \"Fragment\".`,\n            `However we need to passthrough the following props:`,\n            Object.keys(passThroughProps)\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n            '',\n            'You can apply a few solutions:',\n            [\n              'Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\n              'Render a single element as the child so that we can forward the props onto that element.',\n            ]\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n          ].join('\\n')\n        )\n      }\n\n      return cloneElement(\n        resolvedChildren,\n        Object.assign(\n          {},\n          // Filter out undefined values so that they don't override the existing values\n          mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, [\n            'onClick',\n          ]),\n          refRelatedProps\n        )\n      )\n    }\n  }\n\n  return createElement(\n    Component,\n    Object.assign({}, omit(passThroughProps, ['ref']), Component !== Fragment && refRelatedProps),\n    resolvedChildren\n  )\n}\n\n/**\n * We can use this function for the following useCase:\n *\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\n *\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\n * first child, that one should _also_ be called (but before this implementation, it was just\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\n * props of this component.\n *\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\n * so that we can refactor this later (if needed).\n */\nfunction mergeEventFunctions(\n  passThroughProps: Record<string, any>,\n  existingProps: Record<string, any>,\n  functionsToMerge: string[]\n) {\n  let clone = Object.assign({}, passThroughProps)\n  for (let func of functionsToMerge) {\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      Object.assign(clone, {\n        [func](event: { defaultPrevented: boolean }) {\n          // Props we control\n          if (!event.defaultPrevented) passThroughProps[func](event)\n\n          // Existing props on the component\n          if (!event.defaultPrevented) existingProps[func](event)\n        },\n      })\n    }\n  }\n\n  return clone\n}\n\n/**\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\n * wrap it in a forwardRef so that we _can_ passthrough the ref\n */\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(forwardRef((component as unknown) as any) as any, {\n    displayName: component.displayName ?? component.name,\n  })\n}\n\nfunction compact<T extends Record<any, any>>(object: T) {\n  let clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n\nfunction omit<T extends Record<any, any>>(object: T, keysToOmit: string[] = []) {\n  let clone = Object.assign({}, object)\n  for (let key of keysToOmit) {\n    if (key in clone) delete clone[key]\n  }\n  return clone\n}\n","export function disposables() {\n  let disposables: Function[] = []\n\n  let api = {\n    requestAnimationFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      let raf = requestAnimationFrame(...args)\n      api.add(() => cancelAnimationFrame(raf))\n    },\n\n    nextFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      api.requestAnimationFrame(() => {\n        api.requestAnimationFrame(...args)\n      })\n    },\n\n    setTimeout(...args: Parameters<typeof setTimeout>) {\n      let timer = setTimeout(...args)\n      api.add(() => clearTimeout(timer))\n    },\n\n    add(cb: () => void) {\n      disposables.push(cb)\n    },\n\n    dispose() {\n      for (let dispose of disposables.splice(0)) {\n        dispose()\n      }\n    },\n  }\n\n  return api\n}\n","import { useState, useEffect } from 'react'\n\nlet state = { serverHandoffComplete: false }\n\nexport function useServerHandoffComplete() {\n  let [serverHandoffComplete, setServerHandoffComplete] = useState(state.serverHandoffComplete)\n\n  useEffect(() => {\n    if (serverHandoffComplete === true) return\n\n    setServerHandoffComplete(true)\n  }, [serverHandoffComplete])\n\n  useEffect(() => {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true\n  }, [])\n\n  return serverHandoffComplete\n}\n","import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType | null> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n","// TODO: This must already exist somewhere, right? 🤔\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport enum Keys {\n  Space = ' ',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Backspace = 'Backspace',\n\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n\n  Home = 'Home',\n  End = 'End',\n\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n\n  Tab = 'Tab',\n}\n","// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nexport function isDisabledReactIssue7711(element: Element): boolean {\n  let parent = element.parentElement\n  let legend = null\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent\n    parent = parent.parentElement\n  }\n\n  let isParentDisabled = parent?.getAttribute('disabled') === '' ?? false\n  if (isParentDisabled && isFirstLegend(legend)) return false\n\n  return isParentDisabled\n}\n\nfunction isFirstLegend(element: HTMLLegendElement | null): boolean {\n  if (!element) return false\n\n  let previous = element.previousElementSibling\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false\n    previous = previous.previousElementSibling\n  }\n\n  return true\n}\n","import { useState, MutableRefObject } from 'react'\n\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nfunction resolveType<TTag>(props: { type?: string; as?: TTag }) {\n  if (props.type) return props.type\n\n  let tag = props.as ?? 'button'\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button'\n\n  return undefined\n}\n\nexport function useResolveButtonType<TTag>(\n  props: { type?: string; as?: TTag },\n  ref: MutableRefObject<HTMLElement | null>\n) {\n  let [type, setType] = useState(() => resolveType(props))\n\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props))\n  }, [props.type, props.as])\n\n  useIsoMorphicEffect(() => {\n    if (type) return\n    if (!ref.current) return\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button')\n    }\n  }, [type, ref])\n\n  return type\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n  CloseDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.CloseDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.CloseDisclosure]: state => {\n    if (state.disclosureState === DisclosureStates.Closed) return state\n    return { ...state, disclosureState: DisclosureStates.Closed }\n  },\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosureAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nDisclosureAPIContext.displayName = 'DisclosureAPIContext'\n\nfunction useDisclosureAPIContext(component: string) {\n  let context = useContext(DisclosureAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosurePanelContext = createContext<string | null>(null)\nDisclosurePanelContext.displayName = 'DisclosurePanelContext'\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext)\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.CloseDisclosure })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return document.getElementById(buttonId)\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return document.getElementById(buttonId)\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, buttonId]\n  )\n\n  let api = useMemo<ContextType<typeof DisclosureAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open, close }),\n    [disclosureState, close]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <DisclosureAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(disclosureState, {\n            [DisclosureStates.Open]: State.Open,\n            [DisclosureStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props: passthroughProps,\n            slot,\n            defaultTag: DEFAULT_DISCLOSURE_TAG,\n            name: 'Disclosure',\n          })}\n        </OpenClosedProvider>\n      </DisclosureAPIContext.Provider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n  let buttonRef = useSyncRefs(internalButtonRef, ref)\n\n  let panelContext = useDisclosurePanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.disclosureState === DisclosureStates.Closed) return\n\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            document.getElementById(state.buttonId)?.focus()\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            break\n        }\n      }\n    },\n    [dispatch, isWithinPanel, state.disclosureState]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n        document.getElementById(state.buttonId)?.focus()\n      } else {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n      }\n    },\n    [dispatch, props.disabled, state.buttonId, isWithinPanel]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? { ref: buttonRef, type, onKeyDown: handleKeyDown, onClick: handleClick }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled\n          ? undefined\n          : state.disclosureState === DisclosureStates.Open,\n        'aria-controls': state.linkedPanel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let { close } = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.'))\n\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return (\n    <DisclosurePanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Disclosure.Panel',\n      })}\n    </DisclosurePanelContext.Provider>\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n","import { match } from './match'\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nlet focusableSelector = [\n  '[contentEditable=true]',\n  '[tabindex]',\n  'a[href]',\n  'area[href]',\n  'button:not([disabled])',\n  'iframe',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n]\n  .map(\n    process.env.NODE_ENV === 'test'\n      ? // TODO: Remove this once JSDOM fixes the issue where an element that is\n        // \"hidden\" can be the document.activeElement, because this is not possible\n        // in real browsers.\n        selector => `${selector}:not([tabindex='-1']):not([style*='display: none'])`\n      : selector => `${selector}:not([tabindex='-1'])`\n  )\n  .join(',')\n\nexport enum Focus {\n  /** Focus the first non-disabled element */\n  First = 1 << 0,\n\n  /** Focus the previous non-disabled element */\n  Previous = 1 << 1,\n\n  /** Focus the next non-disabled element */\n  Next = 1 << 2,\n\n  /** Focus the last non-disabled element */\n  Last = 1 << 3,\n\n  /** Wrap tab around */\n  WrapAround = 1 << 4,\n\n  /** Prevent scrolling the focusable elements into view */\n  NoScroll = 1 << 5,\n}\n\nexport enum FocusResult {\n  /** Something went wrong while trying to focus. */\n  Error,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N+1` where `N` is the last index in the array, then we overflow. */\n  Overflow,\n\n  /** Focus was successful. */\n  Success,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N-1` where `N` is the first index in the array, then we underflow. */\n  Underflow,\n}\n\nenum Direction {\n  Previous = -1,\n  Next = 1,\n}\n\nexport function getFocusableElements(container: HTMLElement | null = document.body) {\n  if (container == null) return []\n  return Array.from(container.querySelectorAll<HTMLElement>(focusableSelector))\n}\n\nexport enum FocusableMode {\n  /** The element itself must be focusable. */\n  Strict,\n\n  /** The element should be inside of a focusable element. */\n  Loose,\n}\n\nexport function isFocusableElement(\n  element: HTMLElement,\n  mode: FocusableMode = FocusableMode.Strict\n) {\n  if (element === document.body) return false\n\n  return match(mode, {\n    [FocusableMode.Strict]() {\n      return element.matches(focusableSelector)\n    },\n    [FocusableMode.Loose]() {\n      let next: HTMLElement | null = element\n\n      while (next !== null) {\n        if (next.matches(focusableSelector)) return true\n        next = next.parentElement\n      }\n\n      return false\n    },\n  })\n}\n\nexport function focusElement(element: HTMLElement | null) {\n  element?.focus({ preventScroll: true })\n}\n\nexport function focusIn(container: HTMLElement | HTMLElement[], focus: Focus) {\n  let elements = Array.isArray(container) ? container : getFocusableElements(container)\n  let active = document.activeElement as HTMLElement\n\n  let direction = (() => {\n    if (focus & (Focus.First | Focus.Next)) return Direction.Next\n    if (focus & (Focus.Previous | Focus.Last)) return Direction.Previous\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let startIndex = (() => {\n    if (focus & Focus.First) return 0\n    if (focus & Focus.Previous) return Math.max(0, elements.indexOf(active)) - 1\n    if (focus & Focus.Next) return Math.max(0, elements.indexOf(active)) + 1\n    if (focus & Focus.Last) return elements.length - 1\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let focusOptions = focus & Focus.NoScroll ? { preventScroll: true } : {}\n\n  let offset = 0\n  let total = elements.length\n  let next = undefined\n  do {\n    // Guard against infinite loops\n    if (offset >= total || offset + total <= 0) return FocusResult.Error\n\n    let nextIdx = startIndex + offset\n\n    if (focus & Focus.WrapAround) {\n      nextIdx = (nextIdx + total) % total\n    } else {\n      if (nextIdx < 0) return FocusResult.Underflow\n      if (nextIdx >= total) return FocusResult.Overflow\n    }\n\n    next = elements[nextIdx]\n\n    // Try the focus the next element, might not work if it is \"hidden\" to the user.\n    next?.focus(focusOptions)\n\n    // Try the next one in line\n    offset += direction\n  } while (next !== document.activeElement)\n\n  // This is a little weird, but let me try and explain: There are a few scenario's\n  // in chrome for example where a focused `<a>` tag does not get the default focus\n  // styles and sometimes they do. This highly depends on whether you started by\n  // clicking or by using your keyboard. When you programmatically add focus `anchor.focus()`\n  // then the active element (document.activeElement) is this anchor, which is expected.\n  // However in that case the default focus styles are not applied *unless* you\n  // also add this tabindex.\n  if (!next.hasAttribute('tabindex')) next.setAttribute('tabindex', '0')\n\n  return FocusResult.Success\n}\n","function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\nimport React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { disposables } from '../../utils/disposables'\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum MenuStates {\n  Open,\n  Closed,\n}\n\ntype MenuItemDataRef = MutableRefObject<{ textValue?: string; disabled: boolean }>\n\ninterface StateDefinition {\n  menuState: MenuStates\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  itemsRef: MutableRefObject<HTMLDivElement | null>\n  items: { id: string; dataRef: MenuItemDataRef }[]\n  searchQuery: string\n  activeItemIndex: number | null\n}\n\nenum ActionTypes {\n  OpenMenu,\n  CloseMenu,\n\n  GoToItem,\n  Search,\n  ClearSearch,\n  RegisterItem,\n  UnregisterItem,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseMenu }\n  | { type: ActionTypes.OpenMenu }\n  | { type: ActionTypes.GoToItem; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToItem; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterItem; id: string; dataRef: MenuItemDataRef }\n  | { type: ActionTypes.UnregisterItem; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseMenu](state) {\n    if (state.menuState === MenuStates.Closed) return state\n    return { ...state, activeItemIndex: null, menuState: MenuStates.Closed }\n  },\n  [ActionTypes.OpenMenu](state) {\n    if (state.menuState === MenuStates.Open) return state\n    return { ...state, menuState: MenuStates.Open }\n  },\n  [ActionTypes.GoToItem]: (state, action) => {\n    let activeItemIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.items,\n      resolveActiveIndex: () => state.activeItemIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeItemIndex === activeItemIndex) return state\n    return { ...state, searchQuery: '', activeItemIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.items.findIndex(\n      item =>\n        item.dataRef.current.textValue?.startsWith(searchQuery) && !item.dataRef.current.disabled\n    )\n\n    if (match === -1 || match === state.activeItemIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeItemIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterItem]: (state, action) => ({\n    ...state,\n    items: [...state.items, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterItem]: (state, action) => {\n    let nextItems = state.items.slice()\n    let currentActiveItem = state.activeItemIndex !== null ? nextItems[state.activeItemIndex] : null\n\n    let idx = nextItems.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextItems.splice(idx, 1)\n\n    return {\n      ...state,\n      items: nextItems,\n      activeItemIndex: (() => {\n        if (idx === state.activeItemIndex) return null\n        if (currentActiveItem === null) return null\n\n        // If we removed the item before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextItems.indexOf(currentActiveItem)\n      })(),\n    }\n  },\n}\n\nlet MenuContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nMenuContext.displayName = 'MenuContext'\n\nfunction useMenuContext(component: string) {\n  let context = useContext(MenuContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Menu.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useMenuContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_MENU_TAG = Fragment\ninterface MenuRenderPropArg {\n  open: boolean\n}\n\nexport function Menu<TTag extends ElementType = typeof DEFAULT_MENU_TAG>(\n  props: Props<TTag, MenuRenderPropArg>\n) {\n  let reducerBag = useReducer(stateReducer, {\n    menuState: MenuStates.Closed,\n    buttonRef: createRef(),\n    itemsRef: createRef(),\n    items: [],\n    searchQuery: '',\n    activeItemIndex: null,\n  } as StateDefinition)\n  let [{ menuState, itemsRef, buttonRef }, dispatch] = reducerBag\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (menuState !== MenuStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (itemsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseMenu })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<MenuRenderPropArg>(() => ({ open: menuState === MenuStates.Open }), [\n    menuState,\n  ])\n\n  return (\n    <MenuContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(menuState, {\n          [MenuStates.Open]: State.Open,\n          [MenuStates.Closed]: State.Closed,\n        })}\n      >\n        {render({ props, slot, defaultTag: DEFAULT_MENU_TAG, name: 'Menu' })}\n      </OpenClosedProvider>\n    </MenuContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-menu-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.First }))\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last }))\n          break\n      }\n    },\n    [dispatch, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (props.disabled) return\n      if (state.menuState === MenuStates.Open) {\n        dispatch({ type: ActionTypes.CloseMenu })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        event.stopPropagation()\n        dispatch({ type: ActionTypes.OpenMenu })\n      }\n    },\n    [dispatch, d, state, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: useResolveButtonType(props, state.buttonRef),\n    'aria-haspopup': true,\n    'aria-controls': state.itemsRef.current?.id,\n    'aria-expanded': props.disabled ? undefined : state.menuState === MenuStates.Open,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Menu.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEMS_TAG = 'div' as const\ninterface ItemsRenderPropArg {\n  open: boolean\n}\ntype ItemsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet ItemsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Items = forwardRefWithAs(function Items<TTag extends ElementType = typeof DEFAULT_ITEMS_TAG>(\n  props: Props<TTag, ItemsRenderPropArg, ItemsPropsWeControl> &\n    PropsForFeatures<typeof ItemsRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Items.name].join('.'))\n  let itemsRef = useSyncRefs(state.itemsRef, ref)\n\n  let id = `headlessui-menu-items-${useId()}`\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.menuState === MenuStates.Open\n  })()\n\n  useEffect(() => {\n    let container = state.itemsRef.current\n    if (!container) return\n    if (state.menuState !== MenuStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.menuState, state.itemsRef])\n\n  useTreeWalker({\n    container: state.itemsRef.current,\n    enabled: state.menuState === MenuStates.Open,\n    accept(node) {\n      if (node.getAttribute('role') === 'menuitem') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLDivElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          if (state.activeItemIndex !== null) {\n            let { id } = state.items[state.activeItemIndex]\n            document.getElementById(id)?.click()\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [dispatch, searchDisposables, state]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let slot = useMemo<ItemsRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeItemIndex === null ? undefined : state.items[state.activeItemIndex]?.id,\n    'aria-labelledby': state.buttonRef.current?.id,\n    id,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    role: 'menu',\n    tabIndex: 0,\n    ref: itemsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEMS_TAG,\n    features: ItemsRenderFeatures,\n    visible,\n    name: 'Menu.Items',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEM_TAG = Fragment\ninterface ItemRenderPropArg {\n  active: boolean\n  disabled: boolean\n}\ntype MenuItemPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'onPointerLeave'\n  | 'onPointerMove'\n  | 'onMouseLeave'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Item<TTag extends ElementType = typeof DEFAULT_ITEM_TAG>(\n  props: Props<TTag, ItemRenderPropArg, MenuItemPropsWeControl> & {\n    disabled?: boolean\n    onClick?: (event: { preventDefault: Function }) => void\n  }\n) {\n  let { disabled = false, onClick, ...passthroughProps } = props\n  let [state, dispatch] = useMenuContext([Menu.name, Item.name].join('.'))\n  let id = `headlessui-menu-item-${useId()}`\n  let active = state.activeItemIndex !== null ? state.items[state.activeItemIndex].id === id : false\n\n  useIsoMorphicEffect(() => {\n    if (state.menuState !== MenuStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.menuState])\n\n  let bag = useRef<MenuItemDataRef['current']>({ disabled })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterItem, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterItem, id })\n  }, [bag, id])\n\n  let handleClick = useCallback(\n    (event: MouseEvent) => {\n      if (disabled) return event.preventDefault()\n      dispatch({ type: ActionTypes.CloseMenu })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      if (onClick) return onClick(event)\n    },\n    [dispatch, state.buttonRef, disabled, onClick]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<ItemRenderPropArg>(() => ({ active, disabled }), [active, disabled])\n  let propsWeControl = {\n    id,\n    role: 'menuitem',\n    tabIndex: disabled === true ? undefined : -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    disabled: undefined, // Never forward the `disabled` prop\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEM_TAG,\n    name: 'Menu.Item',\n  })\n}\n\n// ---\n\nMenu.Button = Button\nMenu.Items = Items\nMenu.Item = Item\n","import { useState, useEffect } from 'react'\n\nimport { disposables } from '../utils/disposables'\n\nexport function useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  let [d] = useState(disposables)\n  useEffect(() => () => d.dispose(), [d])\n  return d\n}\n","import { useEffect, useRef } from 'react'\n\nexport function useWindowEvent<TType extends keyof WindowEventMap>(\n  type: TType,\n  listener: (this: Window, ev: WindowEventMap[TType]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  let listenerRef = useRef(listener)\n  listenerRef.current = listener\n\n  useEffect(() => {\n    function handler(event: WindowEventMap[TType]) {\n      listenerRef.current.call(window, event)\n    }\n\n    window.addEventListener(type, handler, options)\n    return () => window.removeEventListener(type, handler, options)\n  }, [type, options])\n}\n","import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useIsInitialRender() {\n  let initial = useRef(true)\n\n  useEffect(() => {\n    initial.current = false\n  }, [])\n\n  return initial.current\n}\n","import { once } from '../../../utils/once'\nimport { disposables } from '../../../utils/disposables'\n\nfunction addClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.add(...classes)\n}\n\nfunction removeClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.remove(...classes)\n}\n\nexport enum Reason {\n  Finished = 'finished',\n  Cancelled = 'cancelled',\n}\n\nfunction waitForTransition(node: HTMLElement, done: (reason: Reason) => void) {\n  let d = disposables()\n\n  if (!node) return d.dispose\n\n  // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n  let { transitionDuration, transitionDelay } = getComputedStyle(node)\n\n  let [durationMs, delaysMs] = [transitionDuration, transitionDelay].map(value => {\n    let [resolvedValue = 0] = value\n      .split(',')\n      // Remove falsy we can't work with\n      .filter(Boolean)\n      // Values are returned as `0.3s` or `75ms`\n      .map(v => (v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000))\n      .sort((a, z) => z - a)\n\n    return resolvedValue\n  })\n\n  // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n  if (durationMs !== 0) {\n    d.setTimeout(() => {\n      done(Reason.Finished)\n    }, durationMs + delaysMs)\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished)\n  }\n\n  // If we get disposed before the timeout runs we should cleanup anyway\n  d.add(() => done(Reason.Cancelled))\n\n  return d.dispose\n}\n\nexport function transition(\n  node: HTMLElement,\n  base: string[],\n  from: string[],\n  to: string[],\n  entered: string[],\n  done?: (reason: Reason) => void\n) {\n  let d = disposables()\n  let _done = done !== undefined ? once(done) : () => {}\n\n  removeClasses(node, ...entered)\n  addClasses(node, ...base, ...from)\n\n  d.nextFrame(() => {\n    removeClasses(node, ...from)\n    addClasses(node, ...to)\n\n    d.add(\n      waitForTransition(node, reason => {\n        removeClasses(node, ...to, ...base)\n        addClasses(node, ...entered)\n        return _done(reason)\n      })\n    )\n  })\n\n  // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n  d.add(() => removeClasses(node, ...base, ...from, ...to, ...entered))\n\n  // When we get disposed early, than we should also call the done method but switch the reason.\n  d.add(() => _done(Reason.Cancelled))\n\n  return d.dispose\n}\n","export function once<T>(cb: (...args: T[]) => void) {\n  let state = { called: false }\n\n  return (...args: T[]) => {\n    if (state.called) return\n    state.called = true\n    return cb(...args)\n  }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { Props } from '../../types'\n\nimport { useId } from '../../hooks/use-id'\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render'\nimport { match } from '../../utils/match'\nimport { useIsMounted } from '../../hooks/use-is-mounted'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\nimport { Features, PropsForFeatures, render, RenderStrategy } from '../../utils/render'\nimport { Reason, transition } from './utils/transition'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\ntype ID = ReturnType<typeof useId>\n\nfunction useSplitClasses(classes: string = '') {\n  return useMemo(() => classes.split(' ').filter(className => className.trim().length > 1), [\n    classes,\n  ])\n}\n\ninterface TransitionContextValues {\n  show: boolean\n  appear: boolean\n}\nlet TransitionContext = createContext<TransitionContextValues | null>(null)\nTransitionContext.displayName = 'TransitionContext'\n\nenum TreeStates {\n  Visible = 'visible',\n  Hidden = 'hidden',\n}\n\nexport interface TransitionClasses {\n  enter?: string\n  enterFrom?: string\n  enterTo?: string\n  entered?: string\n  leave?: string\n  leaveFrom?: string\n  leaveTo?: string\n}\n\nexport interface TransitionEvents {\n  beforeEnter?: () => void\n  afterEnter?: () => void\n  beforeLeave?: () => void\n  afterLeave?: () => void\n}\n\ntype TransitionChildProps<TTag> = Props<TTag, TransitionChildRenderPropArg> &\n  PropsForFeatures<typeof TransitionChildRenderFeatures> &\n  TransitionClasses &\n  TransitionEvents & { appear?: boolean }\n\nfunction useTransitionContext() {\n  let context = useContext(TransitionContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\nfunction useParentNesting() {\n  let context = useContext(NestingContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\ninterface NestingContextValues {\n  children: MutableRefObject<{ id: ID; state: TreeStates }[]>\n  register: (id: ID) => () => void\n  unregister: (id: ID, strategy?: RenderStrategy) => void\n}\n\nlet NestingContext = createContext<NestingContextValues | null>(null)\nNestingContext.displayName = 'NestingContext'\n\nfunction hasChildren(\n  bag: NestingContextValues['children'] | { children: NestingContextValues['children'] }\n): boolean {\n  if ('children' in bag) return hasChildren(bag.children)\n  return bag.current.filter(({ state }) => state === TreeStates.Visible).length > 0\n}\n\nfunction useNesting(done?: () => void) {\n  let doneRef = useRef(done)\n  let transitionableChildren = useRef<NestingContextValues['children']['current']>([])\n  let mounted = useIsMounted()\n\n  useEffect(() => {\n    doneRef.current = done\n  }, [done])\n\n  let unregister = useCallback(\n    (childId: ID, strategy = RenderStrategy.Hidden) => {\n      let idx = transitionableChildren.current.findIndex(({ id }) => id === childId)\n      if (idx === -1) return\n\n      match(strategy, {\n        [RenderStrategy.Unmount]() {\n          transitionableChildren.current.splice(idx, 1)\n        },\n        [RenderStrategy.Hidden]() {\n          transitionableChildren.current[idx].state = TreeStates.Hidden\n        },\n      })\n\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        doneRef.current?.()\n      }\n    },\n    [doneRef, mounted, transitionableChildren]\n  )\n\n  let register = useCallback(\n    (childId: ID) => {\n      let child = transitionableChildren.current.find(({ id }) => id === childId)\n      if (!child) {\n        transitionableChildren.current.push({ id: childId, state: TreeStates.Visible })\n      } else if (child.state !== TreeStates.Visible) {\n        child.state = TreeStates.Visible\n      }\n\n      return () => unregister(childId, RenderStrategy.Unmount)\n    },\n    [transitionableChildren, unregister]\n  )\n\n  return useMemo(\n    () => ({\n      children: transitionableChildren,\n      register,\n      unregister,\n    }),\n    [register, unregister, transitionableChildren]\n  )\n}\n\nfunction noop() {}\nlet eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'] as const\nfunction ensureEventHooksExist(events: TransitionEvents) {\n  let result = {} as Record<keyof typeof events, () => void>\n  for (let name of eventNames) {\n    result[name] = events[name] ?? noop\n  }\n  return result\n}\n\nfunction useEvents(events: TransitionEvents) {\n  let eventsRef = useRef(ensureEventHooksExist(events))\n\n  useEffect(() => {\n    eventsRef.current = ensureEventHooksExist(events)\n  }, [events])\n\n  return eventsRef\n}\n\n// ---\n\nlet DEFAULT_TRANSITION_CHILD_TAG = 'div' as const\ntype TransitionChildRenderPropArg = MutableRefObject<HTMLDivElement>\nlet TransitionChildRenderFeatures = Features.RenderStrategy\n\nfunction TransitionChild<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let {\n    // Event \"handlers\"\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n\n    // Class names\n    enter,\n    enterFrom,\n    enterTo,\n    entered,\n    leave,\n    leaveFrom,\n    leaveTo,\n\n    // @ts-expect-error\n    ...rest\n  } = props as typeof props\n  let container = useRef<HTMLElement | null>(null)\n  let [state, setState] = useState(TreeStates.Visible)\n  let strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n  let { show, appear } = useTransitionContext()\n  let { register, unregister } = useParentNesting()\n\n  let initial = useIsInitialRender()\n  let id = useId()\n\n  let isTransitioning = useRef(false)\n\n  let nesting = useNesting(() => {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden)\n      unregister(id)\n      events.current.afterLeave()\n    }\n  })\n\n  useIsoMorphicEffect(() => {\n    if (!id) return\n    return register(id)\n  }, [register, id])\n\n  useIsoMorphicEffect(() => {\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return\n    if (!id) return\n\n    // Make sure that we are visible\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible)\n      return\n    }\n\n    match(state, {\n      [TreeStates.Hidden]: () => unregister(id),\n      [TreeStates.Visible]: () => register(id),\n    })\n  }, [state, id, register, unregister, show, strategy])\n\n  let enterClasses = useSplitClasses(enter)\n  let enterFromClasses = useSplitClasses(enterFrom)\n  let enterToClasses = useSplitClasses(enterTo)\n\n  let enteredClasses = useSplitClasses(entered)\n\n  let leaveClasses = useSplitClasses(leave)\n  let leaveFromClasses = useSplitClasses(leaveFrom)\n  let leaveToClasses = useSplitClasses(leaveTo)\n\n  let events = useEvents({ beforeEnter, afterEnter, beforeLeave, afterLeave })\n\n  let ready = useServerHandoffComplete()\n\n  useEffect(() => {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?')\n    }\n  }, [container, state, ready])\n\n  // Skipping initial transition\n  let skip = initial && !appear\n\n  useIsoMorphicEffect(() => {\n    let node = container.current\n    if (!node) return\n    if (skip) return\n\n    isTransitioning.current = true\n\n    if (show) events.current.beforeEnter()\n    if (!show) events.current.beforeLeave()\n\n    return show\n      ? transition(node, enterClasses, enterFromClasses, enterToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n          if (reason === Reason.Finished) events.current.afterEnter()\n        })\n      : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n\n          if (reason !== Reason.Finished) return\n\n          // When we don't have children anymore we can safely unregister from the parent and hide\n          // ourselves.\n          if (!hasChildren(nesting)) {\n            setState(TreeStates.Hidden)\n            unregister(id)\n            events.current.afterLeave()\n          }\n        })\n  }, [\n    events,\n    id,\n    isTransitioning,\n    unregister,\n    nesting,\n    container,\n    skip,\n    show,\n    enterClasses,\n    enterFromClasses,\n    enterToClasses,\n    leaveClasses,\n    leaveFromClasses,\n    leaveToClasses,\n  ])\n\n  let propsWeControl = { ref: container }\n  let passthroughProps = rest\n\n  return (\n    <NestingContext.Provider value={nesting}>\n      <OpenClosedProvider\n        value={match(state, {\n          [TreeStates.Visible]: State.Open,\n          [TreeStates.Hidden]: State.Closed,\n        })}\n      >\n        {render({\n          props: { ...passthroughProps, ...propsWeControl },\n          defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition.Child',\n        })}\n      </OpenClosedProvider>\n    </NestingContext.Provider>\n  )\n}\n\nexport function Transition<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag> & { show?: boolean; appear?: boolean }\n) {\n  // @ts-expect-error\n  let { show, appear = false, unmount, ...passthroughProps } = props as typeof props\n\n  let usesOpenClosedState = useOpenClosed()\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    show = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  if (![true, false].includes((show as unknown) as boolean)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.')\n  }\n\n  let [state, setState] = useState(show ? TreeStates.Visible : TreeStates.Hidden)\n\n  let nestingBag = useNesting(() => {\n    setState(TreeStates.Hidden)\n  })\n\n  let initial = useIsInitialRender()\n  let transitionBag = useMemo<TransitionContextValues>(\n    () => ({ show: show as boolean, appear: appear || !initial }),\n    [show, appear, initial]\n  )\n\n  useEffect(() => {\n    if (show) {\n      setState(TreeStates.Visible)\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden)\n    }\n  }, [show, nestingBag])\n\n  let sharedProps = { unmount }\n\n  return (\n    <NestingContext.Provider value={nestingBag}>\n      <TransitionContext.Provider value={transitionBag}>\n        {render({\n          props: {\n            ...sharedProps,\n            as: Fragment,\n            children: <TransitionChild {...sharedProps} {...passthroughProps} />,\n          },\n          defaultTag: Fragment,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition',\n        })}\n      </TransitionContext.Provider>\n    </NestingContext.Provider>\n  )\n}\n\nTransition.Child = function Child<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let hasTransitionContext = useContext(TransitionContext) !== null\n  let hasOpenClosedContext = useOpenClosed() !== null\n\n  return !hasTransitionContext && hasOpenClosedContext ? (\n    <Transition {...props} />\n  ) : (\n    <TransitionChild {...props} />\n  )\n}\nTransition.Root = Transition\n","import { useRef, useEffect } from 'react'\n\nexport function useIsMounted() {\n  let mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return mounted\n}\n"],"sourceRoot":""}